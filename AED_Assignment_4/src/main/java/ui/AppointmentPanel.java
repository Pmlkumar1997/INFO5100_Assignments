/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.PatientDirectory;
import model.Patient;
import model.EncounterHistory;
import model.Encounter;
import model.House;
import model.VitalSign;

/**
 *
 * @author mohithparvataneni
 */
public class AppointmentPanel extends javax.swing.JPanel {
    
    private PatientDirectory patientDirectory;
    DefaultTableModel model;
    int row,col;
    private final String[] monthNames = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

    /**
     * Creates new form AppointmentPanel
     */
    public AppointmentPanel(PatientDirectory patientDirectory) {
        initComponents();
        this.patientDirectory = patientDirectory;
        model = (DefaultTableModel) tableAppointment.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSystolic = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDiastolic = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPulse = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAppointment = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSearchFname = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        boxSearchCommunity = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtSearchLname = new javax.swing.JTextField();
        btnSaveAppointment = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        boxMonth = new javax.swing.JComboBox<>();
        boxDay = new javax.swing.JComboBox<>();
        boxYear = new javax.swing.JComboBox<>();
        btnClear = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        boxMinSystolic = new javax.swing.JComboBox<>();
        boxMaxSystolic = new javax.swing.JComboBox<>();
        boxMinDiastolic = new javax.swing.JComboBox<>();
        boxMaxDiastolic = new javax.swing.JComboBox<>();
        boxMinPulse = new javax.swing.JComboBox<>();
        boxMaxPulse = new javax.swing.JComboBox<>();
        btnViewAllEnc = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();

        setForeground(new java.awt.Color(204, 255, 204));
        setToolTipText("Manage patient encounters");
        setPreferredSize(new java.awt.Dimension(1099, 999));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setPreferredSize(new java.awt.Dimension(1099, 999));

        jLabel1.setText("Patient ID");

        jLabel2.setText("Blood Pressure");

        jLabel3.setText("/");

        jLabel4.setText("Pulse Rate");

        jLabel5.setText("Appointment Date");

        tableAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "First Name", "Last Name", "Blood Pressure", "Pulse", "Community", "Appointmnet Date"
            }
        ));
        tableAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAppointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableAppointment);

        jLabel6.setText("Patient ID");

        jLabel7.setText("First Name");

        jLabel8.setText("Community");

        jLabel9.setText("Systolic Pressure");

        boxSearchCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Boylston", "Roxbury", "Fenway", "Prudential" }));

        jLabel10.setText("Last Name");

        btnSaveAppointment.setText("Save");
        btnSaveAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAppointmentActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        boxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mon", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" }));
        boxMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxMonthActionPerformed(evt);
            }
        });

        boxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        boxYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021" }));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnView.setText("View Encounters");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("Abnormalities Search");

        jLabel12.setText("Diastolic Pressure");

        jLabel13.setText("Pulse Rate");

        boxMinSystolic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Min", "110", "100", "90", "80", "70", "60" }));

        boxMaxSystolic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Max", "120", "130", "140", "150", "160", "170", "180" }));

        boxMinDiastolic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Min", "50", "60", "70" }));

        boxMaxDiastolic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Max", "80", "90", "100", "110" }));

        boxMinPulse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Min", "60", "55", "50", "45" }));

        boxMaxPulse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Max", "65", "70", "75", "80", "85", "90", "95", "100" }));

        btnViewAllEnc.setText("View Encounters of all Patients");
        btnViewAllEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllEncActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("Manage Patient Encounters");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnViewAllEnc)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(btnSaveAppointment)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(96, 96, 96)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(boxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(boxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(39, 39, 39)))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel13))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(boxSearchCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(boxMinPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(19, 19, 19)
                                                        .addComponent(boxMaxPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(boxMinDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(boxMaxDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(btnView)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnClear))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(31, 31, 31)
                                        .addComponent(boxMinSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(boxMaxSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(107, 107, 107)
                                        .addComponent(btnSearch))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearchFname, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)))
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchLname, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel14)
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(boxMinSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxMaxSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(boxMinDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxMaxDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(boxMinPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxMaxPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(boxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(boxSearchCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveAppointment)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addGap(63, 63, 63)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtSearchFname)
                    .addComponent(jLabel10)
                    .addComponent(txtSearchLname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear)
                    .addComponent(btnView))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnViewAllEnc)
                .addGap(256, 256, 256))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1093, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        String selectedPatientId = model.getValueAt(row, 0).toString();
        Patient patient = patientDirectory.getPatient(selectedPatientId);
        EncounterHistory eh = patient.getEncounterHistory();
        eh.removeEncounterAtIndex(row);
        model.setRowCount(0);
        displayEncounters(eh.getEncounterDirectory(), patient);

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        String selectedPatientId = model.getValueAt(row, 0).toString();
        String patientId = txtPatientID.getText();
        String strSysPressure = txtSystolic.getText();
        String strDiaPressure  = txtDiastolic.getText();
        String strPulse  = txtPulse.getText();
        String strMonth = boxMonth.getSelectedItem().toString();
        String strDate = boxDay.getSelectedItem().toString();
        String strYear = boxYear.getSelectedItem().toString();

        
        if (patientId.isEmpty() || strSysPressure.isEmpty() || strDiaPressure.isEmpty() || strPulse.isEmpty()|| strMonth.equalsIgnoreCase("Mon")
            || strDate.equalsIgnoreCase("Day") || strYear.equalsIgnoreCase("Year"))
        {
            JOptionPane.showMessageDialog(this, "One or More fields are empty..!", "Empty Fields",2);
           
        }

        else if (!selectedPatientId.equals(patientId))
        {
            JOptionPane.showMessageDialog(this, "Patient Id cannot be updated.!! Please check", "ID error",2);
        }
        
        else
        {
            int sysPressure = Integer.parseInt(strSysPressure);
            int diaPresure = Integer.parseInt(strDiaPressure);
            int pulse = Integer.parseInt(strPulse);
            int month = 0;
            int date = Integer.parseInt(strDate);
            int year = Integer.parseInt(strYear);
            for(int i = 0; i<monthNames.length; i++) { if (monthNames[i].equalsIgnoreCase(strMonth)) month = i+1;}
            
            VitalSign vitalSign = new VitalSign(sysPressure,diaPresure,pulse);
            LocalDate  localDate = LocalDate.of(year, month, date);
            Encounter encounter = new Encounter(localDate,vitalSign);

            Patient patient = patientDirectory.getPatient(patientId);
            EncounterHistory eh = patient.getEncounterHistory();
            List<Encounter> list = eh.getEncounterDirectory();
            list.set(row, encounter);
            model.setRowCount(0);
            displayEncounters(list, patient);

            JOptionPane.showMessageDialog(this, "Successfully Updated encounter", " Update Encounter",1);

            clearSaveFields();
            
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewAllEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllEncActionPerformed
        model.setRowCount(0);
        for (Patient patient : patientDirectory.getPatientDirectory())
        {
            EncounterHistory eh = patient.getEncounterHistory();
            displayEncounters(eh.getEncounterDirectory(),patient);
        }
        clearViewFields();
    }//GEN-LAST:event_btnViewAllEncActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed

        String patientID = txtSearchID.getText();
        String fName = txtSearchFname.getText();
        String lName = txtSearchLname.getText();

        if(patientID.isEmpty() && fName.isEmpty() && lName.isEmpty() ){
            JOptionPane.showMessageDialog(this, "All view fields are empty.!! Please check", "Empty Fields", 2);

        }
        else if (!patientID.isEmpty() && patientDirectory.isValidPatientId(patientID))
        {
            JOptionPane.showMessageDialog(this, "Patient ID doesn't exist..!!Please Check", "Invalid Patient", 2);
        }

        else if(!patientID.isEmpty())
        {
            Patient patient = patientDirectory.getPatient(patientID);

            if (!fName.isEmpty() && !fName.equals(patient.getFirstName()))
            {
                JOptionPane.showMessageDialog(this, "First Name and patien Id doesnot match.!!Please Check", "Invalid Details", 2);
            }

            if (!lName.isEmpty() && !lName.equals(patient.getLastName()))
            {
                JOptionPane.showMessageDialog(this, "Last Name and patien Id doesnot match.!!Please Check", "Invalid Details", 2);
            }
            model.setRowCount(0);
            EncounterHistory encounterHistory = patient.getEncounterHistory();
            displayEncounters(encounterHistory.getEncounterDirectory(), patient);

        }

        else{
            model.setRowCount(0);
            List<Patient> patientList = patientDirectory.getPatientDirectory();
            for(Patient patient : patientList){

                if((fName.isEmpty() || fName.equals(patient.getFirstName())) && (fName.isEmpty() || fName.equals(patient.getFirstName()))){
                    EncounterHistory encounterHistory = patient.getEncounterHistory();
                    displayEncounters(encounterHistory.getEncounterDirectory(), patient);
                }
            }
        }

    }//GEN-LAST:event_btnViewActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed

        model.setRowCount(0);
        clearSaveFields();
        clearSearchFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void boxMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxMonthActionPerformed

        String month = boxMonth.getSelectedItem().toString();
        if(month.equals("Mon")) return;
        boxDay.removeAllItems();
        int days = 31;

        //choose days according to the selected month.
        if (month.equals("Feb")) days = 28;
        else if (month.equals("Apr") || month.equals("Jun") || month.equals("Sep") || month.equals("Nov")) days = 30;

        //Set days range to the day combo box
        for(int i =1; i<=days; i++) { boxDay.addItem(String.valueOf(i));}

    }//GEN-LAST:event_boxMonthActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String community = boxSearchCommunity.getSelectedItem().toString();
        String systolicMin = boxMinSystolic.getSelectedItem().toString();
        String systolicMax = boxMaxSystolic.getSelectedItem().toString();
        String diastolicMin = boxMinDiastolic.getSelectedItem().toString();
        String diastolicMax = boxMaxDiastolic.getSelectedItem().toString();
        String minPulse = boxMinPulse.getSelectedItem().toString();
        String maxPulsen = boxMaxPulse.getSelectedItem().toString();
        
        
        if( systolicMin.equals("Min") && systolicMax.equals("Max") && diastolicMin.equals("Min") && diastolicMax.equals("Max") && minPulse.equals("Min")){
            JOptionPane.showMessageDialog(this, "Please set a abnormality range to search!!", "Empty Fields", 2);
            return;
            
        }
        
        

        model.setRowCount(0);
        for(Patient patient : patientDirectory.getPatientDirectory())
        {

            House house = patient.getHouse();
            if(community.equals("None") || community.equals(house.getCommunity().getCommunityName())){

                EncounterHistory eh = patient.getEncounterHistory();
                for(Encounter encounter : eh.getEncounterDirectory())
                {
                    if(checkAbnormality(encounter, systolicMin, systolicMax, diastolicMin, diastolicMax, minPulse, maxPulsen))
                    {
                        displayEcounter(encounter, patient);
                    }
                }
            }
                    
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAppointmentActionPerformed

        
        String patientId = txtPatientID.getText();
        String strSysPressure = txtSystolic.getText();
        String strDiaPressure  = txtDiastolic.getText();
        String strPulse  = txtPulse.getText();
        String strMonth = boxMonth.getSelectedItem().toString();
        String strDate = boxDay.getSelectedItem().toString();
        String strYear = boxYear.getSelectedItem().toString();

        if (patientId.isEmpty() || strSysPressure.isEmpty() || strDiaPressure.isEmpty() || strPulse.isEmpty()|| strMonth.equalsIgnoreCase("Mon")
            || strDate.equalsIgnoreCase("Day") || strYear.equalsIgnoreCase("Year"))
        {
            JOptionPane.showMessageDialog(this, "One or More fields are empty..!", "Empty Fields",2);
        }

        else if(patientDirectory.isValidPatientId(patientId)){
            JOptionPane.showMessageDialog(this, "Patient Id doesnot exist.!! Please check", "ID error",2);
        }
        
        else
        {
            int sysPressure = Integer.parseInt(strSysPressure);
            int diaPresure = Integer.parseInt(strDiaPressure);
            int pulse = Integer.parseInt(strPulse);
            int month = 0;
            int date = Integer.parseInt(strDate);
            int year = Integer.parseInt(strYear);
            
            for(int i = 0; i<monthNames.length; i++) { if (monthNames[i].equalsIgnoreCase(strMonth)) month = i+1;}
            
            VitalSign vitalSign = new VitalSign(sysPressure,diaPresure,pulse);

            LocalDate  localDate = LocalDate.of(year, month, date);

            Encounter encounter = new Encounter(localDate,vitalSign);

            Patient patient = patientDirectory.getPatient(patientId);
            patient.addEncounter(encounter);

            JOptionPane.showMessageDialog(this, "Successfully added encounter", "Encounter",1);

            clearSaveFields();
            model.setRowCount(0);
            displayEncounters(patient.getEncounterHistory().getEncounterDirectory(),patient);
        }
    }//GEN-LAST:event_btnSaveAppointmentActionPerformed

    private void tableAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAppointmentMouseClicked

        row = tableAppointment.getSelectedRow();

        txtPatientID.setText(model.getValueAt(row, 0).toString());
        txtDiastolic.setText(model.getValueAt(row, 3).toString().split("/")[1]);
        txtSystolic.setText(model.getValueAt(row, 3).toString().split("/")[0]);
        txtPulse.setText(model.getValueAt(row, 4).toString());

        String date = model.getValueAt(row, 6).toString();
        String dayAndMonth = date.split(",")[0].strip();
        String month = dayAndMonth.split(" ")[0].strip();
        String day = dayAndMonth.split(" ")[1].strip();
        String year = date.split(",")[1].strip();
        boxYear.setSelectedItem(year);
        boxDay.setSelectedItem(day);
        boxMonth.setSelectedItem(month.substring(0, 3));

    }//GEN-LAST:event_tableAppointmentMouseClicked
        
    
    public void clearSaveFields(){
        
        txtPatientID.setText("");
        txtSystolic.setText("");
        txtDiastolic.setText("");
        txtPulse.setText("");
        boxMonth.setSelectedIndex(0);
        boxDay.setSelectedIndex(0);
        boxYear.setSelectedIndex(0);
               
    }
    
    public void clearSearchFields()
    {
        boxMinSystolic.setSelectedIndex(0);
        boxMaxSystolic.setSelectedIndex(0);
        boxMinDiastolic.setSelectedIndex(0);
        boxMaxDiastolic.setSelectedIndex(0);
        boxMinPulse.setSelectedIndex(0);
        boxMaxPulse.setSelectedIndex(0);
        boxSearchCommunity.setSelectedIndex(0);
    }
    
    public void clearViewFields()
    {
        txtSearchID.setText("");
        txtSearchFname.setText("");
        txtSearchLname.setText("");
  
    }
    
    public void displayEcounter(Encounter encounter, Patient patient){
        
        House house = patient.getHouse();
        VitalSign vitalsign = encounter.getVitalSign();
        LocalDate localdate = encounter.getDate();
        Community community = house.getCommunity();;
        String date = localdate.getMonth()+" "+localdate.getDayOfMonth()+", "+localdate.getYear();
        Object[] obj = {patient.getPatientId(), patient.getFirstName(),patient.getLastName(), vitalsign.getBp_systolic()+"/"+vitalsign.getBp_diastolic(),vitalsign.getPulse(),community.getCommunityName(),date};
        model.addRow(obj);
        
    }
    public void displayEncounters(List<Encounter> encounterList, Patient patient){
        
        
        for (Encounter encounter : encounterList )
        {
            displayEcounter(encounter, patient);
        }
        
    }
    
    public boolean checkAbnormality(Encounter encounter, String systolicMin, String systolicMax, String diastolicMin, String diastolicMax, String minPulse, String maxPulse)
    {
        VitalSign vitalsign = encounter.getVitalSign();
        
        if( !systolicMin.equals("Min") && vitalsign.getBp_systolic() < Integer.parseInt(systolicMin)) return true;
        if( !systolicMax.equals("Max") && vitalsign.getBp_systolic() > Integer.parseInt(systolicMax)) return true;
        if( !diastolicMin.equals("Min") && vitalsign.getBp_diastolic() < Integer.parseInt(diastolicMin)) return true;
        if( !diastolicMax.equals("Max") && vitalsign.getBp_diastolic() > Integer.parseInt(diastolicMax)) return true;
        if( !minPulse.equals("Min") && vitalsign.getPulse()< Integer.parseInt(minPulse)) return true;
        if( !maxPulse.equals("Max") && vitalsign.getPulse()> Integer.parseInt(maxPulse)) return true;
        return false;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxDay;
    private javax.swing.JComboBox<String> boxMaxDiastolic;
    private javax.swing.JComboBox<String> boxMaxPulse;
    private javax.swing.JComboBox<String> boxMaxSystolic;
    private javax.swing.JComboBox<String> boxMinDiastolic;
    private javax.swing.JComboBox<String> boxMinPulse;
    private javax.swing.JComboBox<String> boxMinSystolic;
    private javax.swing.JComboBox<String> boxMonth;
    private javax.swing.JComboBox<String> boxSearchCommunity;
    private javax.swing.JComboBox<String> boxYear;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSaveAppointment;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnViewAllEnc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAppointment;
    private javax.swing.JTextField txtDiastolic;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtSearchFname;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchLname;
    private javax.swing.JTextField txtSystolic;
    // End of variables declaration//GEN-END:variables
}
