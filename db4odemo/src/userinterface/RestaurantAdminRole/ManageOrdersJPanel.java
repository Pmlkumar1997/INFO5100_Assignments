/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Order;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mohithparvataneni
 */
public class ManageOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrders
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    DefaultTableModel model;
    int row, col;
    private Restaurant restaurant;

    public ManageOrdersJPanel(JPanel userProcessContainer, EcoSystem system, Restaurant restaurant) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.restaurant = restaurant;
        model = (DefaultTableModel) tableOrder.getModel();
        populateDeliveryManBox();
        WorkQueue workQueue = restaurant.getWorkQueue();
        populateTableOrder(workQueue.getWorkRequestList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        btnAccept = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        boxDeliveryMan = new javax.swing.JComboBox<>();
        btnViewAllOrders = new javax.swing.JButton();
        btnViewActiveOrders = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        tableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Item", "Quantity", "Order Value", "Order status", "Comment"
            }
        ));
        tableOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOrder);

        btnAccept.setBackground(new java.awt.Color(102, 204, 255));
        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnReject.setBackground(new java.awt.Color(102, 204, 255));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnAssign.setBackground(new java.awt.Color(102, 204, 255));
        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(102, 204, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        boxDeliveryMan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Delivery Man" }));

        btnViewAllOrders.setBackground(new java.awt.Color(102, 204, 255));
        btnViewAllOrders.setText("View All Orders");
        btnViewAllOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllOrdersActionPerformed(evt);
            }
        });

        btnViewActiveOrders.setBackground(new java.awt.Color(102, 204, 255));
        btnViewActiveOrders.setText("View Active Orders");
        btnViewActiveOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActiveOrdersActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Manage Orders");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAccept)
                        .addGap(18, 18, 18)
                        .addComponent(btnReject)
                        .addGap(26, 26, 26)
                        .addComponent(boxDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnAssign))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(btnViewAllOrders)
                        .addGap(31, 31, 31)
                        .addComponent(btnViewActiveOrders)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel8)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept)
                    .addComponent(btnReject)
                    .addComponent(btnAssign)
                    .addComponent(boxDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewAllOrders)
                    .addComponent(btnViewActiveOrders))
                .addContainerGap(87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed

        String currentStatus = model.getValueAt(row, 4).toString();

        if (currentStatus.equalsIgnoreCase("Ordered")) {
            restaurant.getWorkQueue().getWorkRequestList().get(row).setStatus("Accepted");
            WorkQueue workQueue = restaurant.getWorkQueue();
            populateTableOrder(workQueue.getWorkRequestList());
        } else if (currentStatus.equalsIgnoreCase("rejected")) {

            JOptionPane.showMessageDialog(this, "Rejected Order cannot be accepted", " Order Rejected", 1);

        } else {
            JOptionPane.showMessageDialog(this, "This order is already accepted", " Order Accepted", 1);

        }


    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        String currentStatus = model.getValueAt(row, 3).toString();

        if (currentStatus.equalsIgnoreCase("Ordered")) {
            restaurant.getWorkQueue().getWorkRequestList().get(row).setStatus("Rejected");
            WorkQueue workQueue = restaurant.getWorkQueue();
            populateTableOrder(workQueue.getWorkRequestList());
        } else if (currentStatus.equalsIgnoreCase("rejected")) {

            JOptionPane.showMessageDialog(this, "This order is already Rejected", " Order Rejected", 1);

        } else {
            JOptionPane.showMessageDialog(this, "Accepted orders cannot be rejected", " Order Accepted", 1);

        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed

        String deliveryManUserName = boxDeliveryMan.getSelectedItem().toString();
        String currentStatus = model.getValueAt(row, 4).toString();

        if (deliveryManUserName.equalsIgnoreCase("Select Delivery Man")) {
            JOptionPane.showMessageDialog(this, "Please select Deliver Man", "Delivery Man Missing", 1);
            return;

        }

        if (currentStatus.equalsIgnoreCase("Rejected")) {
            JOptionPane.showMessageDialog(this, "Rejected orders cannot be assigned", " Order Rejected", 1);
            return;
        }

        if (currentStatus.equalsIgnoreCase("Assigned")) {
            JOptionPane.showMessageDialog(this, "This order is already assigned to deliver man", " Order Assigned", 1);
            return;
        }

        UserAccount deliveryManAccount = null;
        for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {
            if (userAccount.getUsername().equalsIgnoreCase(deliveryManUserName)) {
                deliveryManAccount = userAccount;
            }
        }

        Order order = (Order) restaurant.getWorkQueue().getWorkRequestList().get(row);
        order.setSender(deliveryManAccount);
        order.setStatus("Assigned");
        deliveryManAccount.getWorkQueue().addWorkRequest(order);
        WorkQueue workQueue = restaurant.getWorkQueue();
        populateTableOrder(workQueue.getWorkRequestList());
        JOptionPane.showMessageDialog(this, "Order assigned to delivery man", "order assigned",1);

    }//GEN-LAST:event_btnAssignActionPerformed

    private void tableOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderMouseClicked
        // TODO add your handling code here:
        row = tableOrder.getSelectedRow();
        col = tableOrder.getColumnCount();
    }//GEN-LAST:event_tableOrderMouseClicked

    private void btnViewAllOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllOrdersActionPerformed

        WorkQueue workQueue = restaurant.getWorkQueue();
        populateTableOrder(workQueue.getWorkRequestList());
    }//GEN-LAST:event_btnViewAllOrdersActionPerformed

    private void btnViewActiveOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActiveOrdersActionPerformed

        List<WorkRequest> activeList = new ArrayList<>();
        WorkQueue workQueue = restaurant.getWorkQueue();
        for (WorkRequest workRequest : workQueue.getWorkRequestList()) {

            if (workRequest.getStatus().equalsIgnoreCase("Ordered") || workRequest.getStatus().equalsIgnoreCase("Accepted") || workRequest.getStatus().equalsIgnoreCase("Assigned") || workRequest.getStatus().equalsIgnoreCase("On the Way")) {
                activeList.add(workRequest);
            }
        }

        populateTableOrder(activeList);
    }//GEN-LAST:event_btnViewActiveOrdersActionPerformed

    public void populateTableOrder(List<WorkRequest> workRequestList) {
        model.setRowCount(0);
       
        for (WorkRequest workRequest : workRequestList) {
            Order order = (Order) workRequest;
            Object[] objs = {workRequest.getReceiver().getUsername(), order.getFoodItemName(), order.getQuantity(), order.getPrice(), workRequest.getStatus(), order.getMessage()};
            model.addRow(objs);
        }

    }

    public void populateDeliveryManBox() {

        for (DeliveryMan delieverMan : system.getDeliveryManDirectory().getDeliveryManList()) {
            boxDeliveryMan.addItem(delieverMan.getUserName());
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxDeliveryMan;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReject;
    private javax.swing.JButton btnViewActiveOrders;
    private javax.swing.JButton btnViewAllOrders;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableOrder;
    // End of variables declaration//GEN-END:variables
}
